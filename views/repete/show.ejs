<% var currentURLParam = encodeURIComponent(req.url); %>

<% if (repete.local && repete.local.image) { %>
<img style="height: 64px;" src="<%= repete.local.image %>" />
<% } %>

<h1>
  <a class="btn" style="border-color: buttonface;" href="/repetes/" role="button"><span class="glyphicon glyphicon-arrow-left"></span>&nbsp; Répètes</a>
  Répète du <%= repete.debut.toLocaleDateString() %> <%= repete.local.nom %>
</h1>

<h2>
  Enregistrements :

  <% if (repete.enregistrements) { %>
  <button type="button" class="btn btn-primary" title="Télécharger un ZIP contenant les <%=repete.enregistrements.length%> enregistrements de cette répète"><span class="glyphicon glyphicon-cloud-download"></span>&nbsp; ZIP</button>
  <button type="button" class="btn" onclick="getListe();" title="Copier les noms des <%=repete.enregistrements.length%> enregistrements (pour un mail par exemple)"><span class="glyphicon glyphicon-th-list"></span>&nbsp; Liste</button>
  <% } %>
</h2>

<% if (repete.enregistrements) { %>
<div id="enregistrements" class="list-group">
  <%
    // On enregistre la liste de tous les morceaux pour savoir si on a joué plus d'une fois un morceau
    var occurrences = {};

    repete.enregistrements.forEach(function(enr) {

      // On a déjà vu le morceau dans la liste ?
      if (enr.morceau) occurrences[enr.morceau.id] = occurrences[enr.morceau.id] ? occurrences[enr.morceau.id] + 1 : 1;
  %>

  <!-- Lien pour télécharger directement : https://docs.google.com/uc?export=download&id=<%=enr.id%> -->
  <li class="list-group-item <%= !enr.morceau ? "list-group-item-warning" : "" %>">

    <% if (enr.audio) { %>
    <a href="<%= enr.audio %>" type="button" class="btn btn-xs" title="Lire l'enregistrement directement sur le web"><span class="glyphicon glyphicon-play-circle"></span></a>
    <% } %>

    <% if (enr.morceau) { %>
    <!-- Morceau connu -->
    <b><%= enr.morceau.nom %></b> :
    <% } else { %>
    <!-- Morceau inconnu -->
    <a href="/enregistrement/<%=enr.id%>/set-morceau?from=<%=currentURLParam%>" title="Lier à un morceau"><span class="label label-warning">Morceau inconnu</span></a>
    <% } %>

    <a href="<%= enr.fichier %>" title="Télécharger l'enregistrement"><%= enr.nom %></a>

    <%
      // On ajoute une étiquette si on déjà rencontré le morceau dans la répète
      if (enr.morceau && occurrences[enr.morceau.id] > 1) {
        var occ = occurrences[enr.morceau.id];
    %>
    <span class="label label-default" title="C'est là <%=occ%>e fois qu'on a joué &quot;<%=enr.morceau.nom%>&quot; lors de cette répète"><%=occ%></span>
    <%
      }
    %>

  </li>

  <% }); %>
</div>

<!--<h3>Ajouter des fichiers :</h3>-->

<form name="upload">
  <input type="file" name="upload" multiple>
  <p>ou ajouter un fichier déjà sur Google Drive : </p>
  <input type="text" name="googleLink" placeholder="ID du fichier dans Google Drive" />
  <input type="button" name="googleLinkButton" value="Ajouter" onclick="addGoogleFile(this.form.googleLink.value)" />
</form>

<script src="/js/upload.js"></script>
<script>

  // openClassRoom :
  var form = document.forms.upload;
  detectUpload(form.upload, "#enregistrements");

  /**
   * liste des morceaux pour être copié/collé dans un mail par exemple
   */
  function getListe() {
    var liste = [];
    var parent = $("#enregistrements");
    parent.find(".list-group-item").each(function() {

      // On prend uniquement le nom du morceau si on le connait
      var morceauElt = $(this).find("b");
      var text = morceauElt.size() ? morceauElt.text() : this.innerText;
      liste.push(text);
    });

    prompt('Copier la liste des morceaux ci-dessous', liste.join('\n'));
  }

  /**
   * Ajoute dans la base un lien vers un fichier qui se trouve déjà sur Google Drive
   * (pas besoin de l'uploader)
   *
   * On passe par l'URL : https://www.googleapis.com/drive/v3/files/0B2bkDQNfrAz8UEkydDdEY2xUSEk?key={YOUR_API_KEY}
   *
   * @param link lien de partage du fichier Google Drive
   */
  function addGoogleFile(link) {

    var googleFileId = link; // TODO : temporairement on passe directement l'ID
    var keyId = "AIzaSyCxSmQGKZ9sEr5dfr6RtlRPpvr0_Tls-6w";
    var headers = new Headers();
    headers.append("Authorization", "Bearer " + getGoogleToken());

    var fields = [
      'id',
      'name',
      'modifiedTime'
    ];

//    var url = new URL("https://www.googleapis.com/drive/v3/files/" + googleFileId);
//    if (!URL.prototype.searchParams) {
//
//      // URLSearchParams >= 49 pour Chrome
//      if (typeof URLSearchParams === 'undefined') {
//        var URLSearchParams = function() {
//          this.params = {};
//        }
//
//        URLSearchParams.prototype.append = function(key, value) {
//          this.params[key] = value;
//        }
//
//        window.URLSearchParams = URLSearchParams;
//      }
//
//      URL.prototype.searchParams = new URLSearchParams();
//    }
//    url.searchParams.append();

    // https://fetch.spec.whatwg.org/#fetch-method
    fetch('https://www.googleapis.com/drive/v3/files/'+googleFileId+'?fields='+encodeURIComponent(fields.join(','))+'&key='+keyId, {
      headers: headers
    }).then(function(res) {
      return res.json();
    }).then(function(googleFile) {
      return useGoogleJsonFile(googleFile, createEnregistrement)
    });
  }

  /**
   * Exemple :
   *
   * @param googleFile {{
           kind: "drive#file",
           id: "0B2bkDQNfrAz8UEkydDdEY2xUSEk",
           name: "Downtown.mp3",
           mimeType: "audio/mpeg",
           modifiedTime: "2016-03-17T13:46:06.308Z"
         }}
   * @param cb {function(sql)}
   */
  function useGoogleJsonFile(googleFile, cb) { // JSON parsé
//      console.dir(json);

    // Id de la répète courante
    var repete = parseInt(location.pathname.substring(location.pathname.lastIndexOf('/') + 1));

    // Création de l'objet enregistrement avant mise en BDD
    var sql = {
      nom: googleFile.name,
      timestamp: googleFile.modifiedTime,
      fichier:  'https://docs.google.com/uc?export=download&id=' + googleFile.id,
      audio: 'https://drive.google.com/open?id=' + googleFile.id,
      // duree: TODO,
      repete: getRepeteId()
    };

    return cb(sql);
  }

  /**
   *
   * @param sql {{
      nom: string,
      timestamp: date,
      fichier:  'https://docs.google.com/uc?export=download&id={googleFile.id}',
      audio: 'https://drive.google.com/open?id={googleFile.id}',
      duree: Number,
      repete: Number
    }}
   */
  function createEnregistrement(sql) {
    io.socket.post('/enregistrement', sql, function(enrSql, jwr) {
      if (jwr.error) throw new Error(jwr.error);
      console.dir(enrSql);
      location.reload(); // TODO : callback
    });
  }

</script>

<% } else { %>
Aucun
<% } %>

